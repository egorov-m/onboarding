version: "3.9"
name: ${PROJECT_NAME}

x-common-restart-policy: &common-restart-policy
  restart_policy:
    condition: on-failure
    max_attempts: 5

x-common-security-opt: &common-security-opt
  security_opt:
    - no-new-privileges:true

services:
  onboarding-web-app:
    build:
      context: projects/frontend
      dockerfile: packages/onboarding/docker/Dockerfile
      target: development  # production - not supported yet
      args:
        - BUILDER_BASE_IMAGE=${ONBOARDING_WEB_APP_BUILDER_BASE_IMAGE}
        - SERVER_BASE_IMAGE=${ONBOARDING_WEB_APP_SERVER_BASE_IMAGE}
        - REACT_APP_SERVER_PATH_PREFIX=${ONBOARDING_WEB_APP_PATH_PREFIX}
    container_name: ${PROJECT_NAME}_onboarding-web-app
    environment:
      - REACT_APP_SERVER_PATH_PREFIX=${ONBOARDING_WEB_APP_PATH_PREFIX}
    networks:
      - onboarding-web-app-proxy
    depends_on:
      traefik:
        condition: service_healthy
      onboarding-api:
        condition: service_started
    restart: unless-stopped
    profiles:
      - onboarding
      - all
    <<: *common-security-opt
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1G"
      <<: *common-restart-policy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.onboarding-web-app-rtr.entrypoints=websecure"
      - "traefik.http.routers.onboarding-web-app-rtr.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`${ONBOARDING_WEB_APP_PATH_PREFIX}`)"
      - "traefik.http.routers.onboarding-web-app-rtr.tls=true"
      - "traefik.http.routers.onboarding-web-app-rtr.service=onboarding-web-app-svc"
      - "traefik.http.services.onboarding-web-app-svc.loadbalancer.server.port=80"
      - "traefik.http.routers.onboarding-web-app-rtr.middlewares=chain-oauth@file"

  onboarding-api:
    build:
      context: projects/backend
      dockerfile: onboarding-api/docker/Dockerfile
      target: production
      args:
        - BASE_IMAGE=${ONBOARDING_API_BASE_IMAGE}
    container_name: ${PROJECT_NAME}_onboarding-api
    environment:
      - SERVER_DOMAIN_NAME=${DOMAIN_NAME}
      - SERVER_PROTOCOL=https
      - SERVER_PATH_PREFIX=${ONBOARDING_API_PATH_PREFIX}
      - DEBUG=False
      - WORKERS=${ONBOARDING_API_WORKERS}
      - WORKER_TIMEOUT=${ONBOARDING_API_WORKER_TIMEOUT}
      - DB_HOST=${ONBOARDING_DB_HOST}
      - DB_PORT=${ONBOARDING_DB_PORT}
      - DB_NAME=${ONBOARDING_DB_NAME}
      - DB_USER=${ONBOARDING_DB_USER}
      - DB_PASSWORD=${ONBOARDING_DB_PASSWORD}
      - S3_HOST=${S3_HOST}
      - S3_PORT=${S3_PORT}
      - S3_SECURE=${S3_SECURE}
      - S3_CERT_CHECK=${S3_CERT_CHECK}
      - S3_ACCESS_KEY=${S3_ROOT_USER}
      - S3_SECRET_KEY=${S3_ROOT_PASSWORD}
      - S3_BUCKETS_PREFIX=${S3_BUCKETS_PREFIX}
    networks:
      - onboarding-db
#      - onboarding-minio
      - onboarding-api-proxy
    depends_on:
      traefik:
        condition: service_healthy
      onboarding-db:
        condition: service_healthy
#      minio:
#        condition: service_healthy
    restart: unless-stopped
    profiles:
      - onboarding
      - all
    <<: *common-security-opt
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1G"
      <<: *common-restart-policy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.onboarding-api-rtr.entrypoints=websecure"
      - "traefik.http.routers.onboarding-api-rtr.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`${ONBOARDING_API_PATH_PREFIX}`)"
      - "traefik.http.routers.onboarding-api-rtr.tls=true"
      - "traefik.http.routers.onboarding-api-rtr.service=onboarding-api-svc"
      - "traefik.http.services.onboarding-api-svc.loadbalancer.server.port=80"
      - "traefik.http.routers.onboarding-api-rtr.middlewares=chain-oauth@file"

  onboarding-db:
    image: ${ONBOARDING_DB_IMAGE}
    container_name: ${PROJECT_NAME}_onboarding-db
    environment:
      - POSTGRES_PASSWORD=${ONBOARDING_DB_PASSWORD}
      - POSTGRES_USER=${ONBOARDING_DB_USER}
      - POSTGRES_DB=${ONBOARDING_DB_NAME}
    networks:
      - onboarding-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${ONBOARDING_DB_USER} -d ${ONBOARDING_DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - infra
      - all
    <<: *common-security-opt
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
      <<: *common-restart-policy

# difficulties with output behind proxy, can't use prefix path
#  minio:
#    image: ${MINIO_IMAGE}
#    container_name: ${PROJECT_NAME}_minio
#    environment:
#      - MINIO_ROOT_USER=${S3_ROOT_USER}
#      - MINIO_ROOT_PASSWORD=${S3_ROOT_PASSWORD}
#      - MINIO_BROWSER=off
#      - MINIO_SERVER_URL=https://${DOMAIN_NAME}
#    networks:
#      - minio-proxy
#      - onboarding-minio
#    depends_on:
#      traefik:
#        condition: service_healthy
#    command:
#      - server
#      - /data
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
#      interval: 30s
#      timeout: 20s
#      retries: 3
#    restart: unless-stopped
#    profiles:
#      - infra
#      - all
#    <<: *common-security-opt
#    deploy:
#      resources:
#        limits:
#          cpus: "1"
#          memory: "1G"
#      <<: *common-restart-policy
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.minio-rtr.entrypoints=websecure"
#      - "traefik.http.routers.minio-rtr.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`${S3_PATH_PREFIX}`)"
#      - "traefik.http.middlewares.s3-stripprefix.stripprefix.prefixes=${S3_PATH_PREFIX}"
#      - "traefik.http.routers.minio-rtr.middlewares=s3-stripprefix"
#      - "traefik.http.routers.minio-rtr.tls=true"
#      - "traefik.http.routers.minio-rtr.service=minio-svc"
#      - "traefik.http.services.minio-svc.loadbalancer.server.port=9000"
##      - "traefik.http.routers.minio-rtr.middlewares=chain-no-auth@file"

  docker-socket-proxy:
    image: ${DOCKER_SOCKET_PROXY_IMAGE}
    container_name: ${PROJECT_NAME}_docker-socket-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - LOG_LEVEL=warning
      - CONTAINERS=1
    networks:
      - docker-socket-proxy
    restart: unless-stopped
    profiles:
      - infra
      - all
    <<: *common-security-opt
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
      <<: *common-restart-policy

  traefik:
    image: ${TRAEFIK_IMAGE}
    hostname: ${DOMAIN_NAME}
    container_name: ${PROJECT_NAME}_traefik
    environment:
      - TZ=${TZ}
      - DOMAIN_NAME=${DOMAIN_NAME}
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - ${DEPLOY_DIR}/projects/3rdparty/traefik3/rules:/rules:ro
      - ${DEPLOY_DIR}/data/logs/traefik:/logs
    networks:
      - onboarding-web-app-proxy
      - onboarding-api-proxy
      - docker-socket-proxy
      - oauth2-proxy
#      - minio-proxy
      - dex-proxy
    depends_on:
      docker-socket-proxy:
        condition: service_started
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck", "--ping" ]
      interval: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    profiles:
      - infra
      - all
    <<: *common-security-opt
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
      <<: *common-restart-policy
    command:
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --ping=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=WARN
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      - --providers.docker.endpoint=tcp://docker-socket-proxy:2375
      - --providers.docker.exposedByDefault=false
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.options=tls-opts@file
      - --providers.file.directory=/rules
      - --providers.file.watch=true

  oauth2-proxy:
    image: ${OAUTH2_PROXY_IMAGE}
    container_name: ${PROJECT_NAME}_oauth2-proxy
    depends_on:
      traefik:
        condition: service_healthy
      dex:
        condition: service_started
    restart: unless-stopped
    networks:
      oauth2-proxy: {}
      oauth2: {}
    profiles:
      - infra
      - all
    <<: *common-security-opt
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
      <<: *common-restart-policy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${PROJECT_NAME}_oauth2-proxy"
      ## HTTP Routers
      - "traefik.http.routers.oauth2-rtr.entrypoints=websecure"
      - "traefik.http.routers.oauth2-rtr.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`${OAUTH_PATH_PREFIX}`)"
      - "traefik.http.routers.oauth2-rtr.tls=true"
      ## HTTP Services
      - "traefik.http.routers.oauth2-rtr.service=oauth2-svc"
      - "traefik.http.services.oauth2-svc.loadbalancer.server.port=4180"
    command:
      ## General Provider Options
      - --approval-prompt=auto
      - --client-id=${OIDC_CLIENT_ID}
      - --client-secret=${OIDC_CLIENT_SECRET}
      - --code-challenge-method=S256
      - --insecure-oidc-skip-nonce=false
      - --oidc-issuer-url=${DEX_ISSUER}
      - --provider-display-name=${DEX_PROVIDER_DISPLAY_NAME}
      - --provider=oidc
      - --scope=openid email profile groups
      ## Cookie Options
      - --cookie-csrf-expire=15m
      - --cookie-csrf-per-request=false
      - --cookie-domain=${DOMAIN_NAME}
      - --cookie-expire=168h0m0s
      - --cookie-httponly=true
      - --cookie-name=${OAUTH_PROXY_COOKIE_NAME}
      - --cookie-refresh=24h0m0s
      - --cookie-samesite=lax
      - --cookie-secret=${OAUTH_PROXY_COOKIE_SECRET}
      - --cookie-secure=true
      ## Header Options
      - --set-xauthrequest=true
      - --pass-basic-auth=true
      - --pass-access-token=true
      - --prefer-email-to-user=true
      - --pass-user-headers=true
      ## Logging Options
      - --auth-logging=true
      - --exclude-logging-path="/ping"
      - --request-id-header=X-Request-Id
      - --request-logging=true
      - --standard-logging=true
      ## Proxy Options
      - --email-domain=*
      - --proxy-prefix=${OAUTH_PATH_PREFIX}
      - --real-client-ip-header=X-Real-IP
      - --redirect-url=https://${DOMAIN_NAME}${OAUTH_PATH_PREFIX}/callback
      - --reverse-proxy=true
      - --skip-provider-button=true
      - --ssl-insecure-skip-verify=true
      - --whitelist-domain=${DOMAIN_NAME}
      ## Server Options
      - --http-address=0.0.0.0:4180
      ## Upstream Options
      - --upstream-timeout=30s
      - --upstream="static://202"

  dex:
    image: ${DEX_IMAGE}
    container_name: ${PROJECT_NAME}_dex
    environment:
      - DEX_FRONTEND_DIR=/srv/dex/web
      - DEX_ISSUER=${DEX_ISSUER}
      - DEX_DB_HOST=${DEX_DB_HOST}
      - DEX_DB_PORT=${DEX_DB_PORT}
      - DEX_DB_NAME=${DEX_DB_NAME}
      - DEX_DB_USER=${DEX_DB_USER}
      - DEX_DB_PASSWORD=${DEX_DB_PASSWORD}
      - DEX_PORT=5556
      - DEX_PROVIDER_DISPLAY_NAME=${DEX_PROVIDER_DISPLAY_NAME}
      - DEX_CLIENT_ID=${OIDC_CLIENT_ID}
      - DEX_CLIENT_SECRET=${OIDC_CLIENT_SECRET}
      - DEX_CLIENT_NAME=${OIDC_CLIENT_NAME}
      - DEX_CLIENT_REDIRECT_URI=${OIDC_CLIENT_REDIRECT_URI}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    volumes:
      - ${DEPLOY_DIR}/projects/3rdparty/dex/docker-command.sh:/docker-command.sh:ro
      - ${DEPLOY_DIR}/projects/3rdparty/dex/web:/srv/dex/web:ro
    networks:
      - dex-proxy
      - dex
    depends_on:
      traefik:
        condition: service_healthy
      dex-db:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - infra
      - all
    <<: *common-security-opt
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "512m"
      <<: *common-restart-policy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${PROJECT_NAME}_dex-proxy"
      ## HTTP Routers
      - "traefik.http.routers.dex-rtr.entrypoints=websecure"
      - "traefik.http.routers.dex-rtr.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`${SSO_PATH_PREFIX}`)"
      - "traefik.http.routers.dex-rtr.tls=true"
      ## HTTP Services
      - "traefik.http.routers.dex-rtr.service=dex-svc"
      - "traefik.http.services.dex-svc.loadbalancer.server.port=5556"
    command: ["/bin/sh", "/docker-command.sh"]

  dex-db:
    image: ${DEX_DB_IMAGE}
    container_name: ${PROJECT_NAME}_dex-db
    environment:
      - POSTGRES_PASSWORD=${DEX_DB_PASSWORD}
      - POSTGRES_USER=${DEX_DB_USER}
      - POSTGRES_DB=${DEX_DB_NAME}
    networks:
      - dex
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DEX_DB_USER} -d ${DEX_DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - infra
      - all
    <<: *common-security-opt
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
      <<: *common-restart-policy

networks:
  default:
  onboarding-db:
#  onboarding-minio:
  onboarding-api-proxy:
  onboarding-web-app-proxy:
  docker-socket-proxy:
#  minio-proxy:
  dex-proxy:
  dex:
  oauth2:
  oauth2-proxy:
